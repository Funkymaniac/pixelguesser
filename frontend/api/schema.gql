schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "quizzes"
  """
  delete_quizzes(
    """filter the rows which have to be deleted"""
    where: quizzes_bool_exp!
  ): quizzes_mutation_response

  """
  delete single row from the table: "quizzes"
  """
  delete_quizzes_by_pk(id: bigint!): quizzes

  """
  delete data from the table: "rounds"
  """
  delete_rounds(
    """filter the rows which have to be deleted"""
    where: rounds_bool_exp!
  ): rounds_mutation_response

  """
  delete single row from the table: "rounds"
  """
  delete_rounds_by_pk(index: bigint!, quiz_id: bigint!): rounds

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: String!): users

  """
  insert data into the table: "quizzes"
  """
  insert_quizzes(
    """the rows to be inserted"""
    objects: [quizzes_insert_input!]!

    """on conflict condition"""
    on_conflict: quizzes_on_conflict
  ): quizzes_mutation_response

  """
  insert a single row into the table: "quizzes"
  """
  insert_quizzes_one(
    """the row to be inserted"""
    object: quizzes_insert_input!

    """on conflict condition"""
    on_conflict: quizzes_on_conflict
  ): quizzes

  """
  insert data into the table: "rounds"
  """
  insert_rounds(
    """the rows to be inserted"""
    objects: [rounds_insert_input!]!

    """on conflict condition"""
    on_conflict: rounds_on_conflict
  ): rounds_mutation_response

  """
  insert a single row into the table: "rounds"
  """
  insert_rounds_one(
    """the row to be inserted"""
    object: rounds_insert_input!

    """on conflict condition"""
    on_conflict: rounds_on_conflict
  ): rounds

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "quizzes"
  """
  update_quizzes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: quizzes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: quizzes_set_input

    """filter the rows which have to be updated"""
    where: quizzes_bool_exp!
  ): quizzes_mutation_response

  """
  update single row of the table: "quizzes"
  """
  update_quizzes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: quizzes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: quizzes_set_input
    pk_columns: quizzes_pk_columns_input!
  ): quizzes

  """
  update data of the table: "rounds"
  """
  update_rounds(
    """increments the numeric columns with given value of the filtered values"""
    _inc: rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rounds_set_input

    """filter the rows which have to be updated"""
    where: rounds_bool_exp!
  ): rounds_mutation_response

  """
  update single row of the table: "rounds"
  """
  update_rounds_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: rounds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rounds_set_input
    pk_columns: rounds_pk_columns_input!
  ): rounds

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "quizzes"
  """
  quizzes(
    """distinct select on columns"""
    distinct_on: [quizzes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [quizzes_order_by!]

    """filter the rows returned"""
    where: quizzes_bool_exp
  ): [quizzes!]!

  """An aggregate relationship"""
  quizzes_aggregate(
    """distinct select on columns"""
    distinct_on: [quizzes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [quizzes_order_by!]

    """filter the rows returned"""
    where: quizzes_bool_exp
  ): quizzes_aggregate!

  """fetch data from the table: "quizzes" using primary key columns"""
  quizzes_by_pk(id: bigint!): quizzes

  """An array relationship"""
  rounds(
    """distinct select on columns"""
    distinct_on: [rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rounds_order_by!]

    """filter the rows returned"""
    where: rounds_bool_exp
  ): [rounds!]!

  """An aggregate relationship"""
  rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rounds_order_by!]

    """filter the rows returned"""
    where: rounds_bool_exp
  ): rounds_aggregate!

  """fetch data from the table: "rounds" using primary key columns"""
  rounds_by_pk(index: bigint!, quiz_id: bigint!): rounds

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

"""
columns and relationships of "quizzes"
"""
type quizzes {
  created_at: timestamptz!

  """An object relationship"""
  creator: users!
  creator_id: String!
  description: String!
  explanation: String!
  id: bigint!
  image: String
  public: Boolean!

  """An array relationship"""
  rounds(
    """distinct select on columns"""
    distinct_on: [rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rounds_order_by!]

    """filter the rows returned"""
    where: rounds_bool_exp
  ): [rounds!]!

  """An aggregate relationship"""
  rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rounds_order_by!]

    """filter the rows returned"""
    where: rounds_bool_exp
  ): rounds_aggregate!
  title: String!
}

"""
aggregated selection of "quizzes"
"""
type quizzes_aggregate {
  aggregate: quizzes_aggregate_fields
  nodes: [quizzes!]!
}

"""
aggregate fields of "quizzes"
"""
type quizzes_aggregate_fields {
  avg: quizzes_avg_fields
  count(columns: [quizzes_select_column!], distinct: Boolean): Int!
  max: quizzes_max_fields
  min: quizzes_min_fields
  stddev: quizzes_stddev_fields
  stddev_pop: quizzes_stddev_pop_fields
  stddev_samp: quizzes_stddev_samp_fields
  sum: quizzes_sum_fields
  var_pop: quizzes_var_pop_fields
  var_samp: quizzes_var_samp_fields
  variance: quizzes_variance_fields
}

"""
order by aggregate values of table "quizzes"
"""
input quizzes_aggregate_order_by {
  avg: quizzes_avg_order_by
  count: order_by
  max: quizzes_max_order_by
  min: quizzes_min_order_by
  stddev: quizzes_stddev_order_by
  stddev_pop: quizzes_stddev_pop_order_by
  stddev_samp: quizzes_stddev_samp_order_by
  sum: quizzes_sum_order_by
  var_pop: quizzes_var_pop_order_by
  var_samp: quizzes_var_samp_order_by
  variance: quizzes_variance_order_by
}

"""
input type for inserting array relation for remote table "quizzes"
"""
input quizzes_arr_rel_insert_input {
  data: [quizzes_insert_input!]!

  """on conflict condition"""
  on_conflict: quizzes_on_conflict
}

"""aggregate avg on columns"""
type quizzes_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "quizzes"
"""
input quizzes_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "quizzes". All fields are combined with a logical 'AND'.
"""
input quizzes_bool_exp {
  _and: [quizzes_bool_exp!]
  _not: quizzes_bool_exp
  _or: [quizzes_bool_exp!]
  created_at: timestamptz_comparison_exp
  creator: users_bool_exp
  creator_id: String_comparison_exp
  description: String_comparison_exp
  explanation: String_comparison_exp
  id: bigint_comparison_exp
  image: String_comparison_exp
  public: Boolean_comparison_exp
  rounds: rounds_bool_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "quizzes"
"""
enum quizzes_constraint {
  """unique or primary key constraint"""
  quizzes_pkey
}

"""
input type for incrementing numeric columns in table "quizzes"
"""
input quizzes_inc_input {
  id: bigint
}

"""
input type for inserting data into table "quizzes"
"""
input quizzes_insert_input {
  created_at: timestamptz
  creator: users_obj_rel_insert_input
  creator_id: String
  description: String
  explanation: String
  id: bigint
  image: String
  public: Boolean
  rounds: rounds_arr_rel_insert_input
  title: String
}

"""aggregate max on columns"""
type quizzes_max_fields {
  created_at: timestamptz
  creator_id: String
  description: String
  explanation: String
  id: bigint
  image: String
  title: String
}

"""
order by max() on columns of table "quizzes"
"""
input quizzes_max_order_by {
  created_at: order_by
  creator_id: order_by
  description: order_by
  explanation: order_by
  id: order_by
  image: order_by
  title: order_by
}

"""aggregate min on columns"""
type quizzes_min_fields {
  created_at: timestamptz
  creator_id: String
  description: String
  explanation: String
  id: bigint
  image: String
  title: String
}

"""
order by min() on columns of table "quizzes"
"""
input quizzes_min_order_by {
  created_at: order_by
  creator_id: order_by
  description: order_by
  explanation: order_by
  id: order_by
  image: order_by
  title: order_by
}

"""
response of any mutation on the table "quizzes"
"""
type quizzes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [quizzes!]!
}

"""
input type for inserting object relation for remote table "quizzes"
"""
input quizzes_obj_rel_insert_input {
  data: quizzes_insert_input!

  """on conflict condition"""
  on_conflict: quizzes_on_conflict
}

"""
on conflict condition type for table "quizzes"
"""
input quizzes_on_conflict {
  constraint: quizzes_constraint!
  update_columns: [quizzes_update_column!]! = []
  where: quizzes_bool_exp
}

"""Ordering options when selecting data from "quizzes"."""
input quizzes_order_by {
  created_at: order_by
  creator: users_order_by
  creator_id: order_by
  description: order_by
  explanation: order_by
  id: order_by
  image: order_by
  public: order_by
  rounds_aggregate: rounds_aggregate_order_by
  title: order_by
}

"""primary key columns input for table: quizzes"""
input quizzes_pk_columns_input {
  id: bigint!
}

"""
select columns of table "quizzes"
"""
enum quizzes_select_column {
  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  description

  """column name"""
  explanation

  """column name"""
  id

  """column name"""
  image

  """column name"""
  public

  """column name"""
  title
}

"""
input type for updating data in table "quizzes"
"""
input quizzes_set_input {
  created_at: timestamptz
  creator_id: String
  description: String
  explanation: String
  id: bigint
  image: String
  public: Boolean
  title: String
}

"""aggregate stddev on columns"""
type quizzes_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "quizzes"
"""
input quizzes_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type quizzes_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "quizzes"
"""
input quizzes_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type quizzes_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "quizzes"
"""
input quizzes_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type quizzes_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "quizzes"
"""
input quizzes_sum_order_by {
  id: order_by
}

"""
update columns of table "quizzes"
"""
enum quizzes_update_column {
  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  description

  """column name"""
  explanation

  """column name"""
  id

  """column name"""
  image

  """column name"""
  public

  """column name"""
  title
}

"""aggregate var_pop on columns"""
type quizzes_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "quizzes"
"""
input quizzes_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type quizzes_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "quizzes"
"""
input quizzes_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type quizzes_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "quizzes"
"""
input quizzes_variance_order_by {
  id: order_by
}

"""
columns and relationships of "rounds"
"""
type rounds {
  answer: String!
  guesses: bigint!
  image: String!
  index: bigint!
  points: bigint!

  """An object relationship"""
  quiz: quizzes!
  quiz_id: bigint!
  speed: float8
}

"""
aggregated selection of "rounds"
"""
type rounds_aggregate {
  aggregate: rounds_aggregate_fields
  nodes: [rounds!]!
}

"""
aggregate fields of "rounds"
"""
type rounds_aggregate_fields {
  avg: rounds_avg_fields
  count(columns: [rounds_select_column!], distinct: Boolean): Int!
  max: rounds_max_fields
  min: rounds_min_fields
  stddev: rounds_stddev_fields
  stddev_pop: rounds_stddev_pop_fields
  stddev_samp: rounds_stddev_samp_fields
  sum: rounds_sum_fields
  var_pop: rounds_var_pop_fields
  var_samp: rounds_var_samp_fields
  variance: rounds_variance_fields
}

"""
order by aggregate values of table "rounds"
"""
input rounds_aggregate_order_by {
  avg: rounds_avg_order_by
  count: order_by
  max: rounds_max_order_by
  min: rounds_min_order_by
  stddev: rounds_stddev_order_by
  stddev_pop: rounds_stddev_pop_order_by
  stddev_samp: rounds_stddev_samp_order_by
  sum: rounds_sum_order_by
  var_pop: rounds_var_pop_order_by
  var_samp: rounds_var_samp_order_by
  variance: rounds_variance_order_by
}

"""
input type for inserting array relation for remote table "rounds"
"""
input rounds_arr_rel_insert_input {
  data: [rounds_insert_input!]!

  """on conflict condition"""
  on_conflict: rounds_on_conflict
}

"""aggregate avg on columns"""
type rounds_avg_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by avg() on columns of table "rounds"
"""
input rounds_avg_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""
Boolean expression to filter rows from the table "rounds". All fields are combined with a logical 'AND'.
"""
input rounds_bool_exp {
  _and: [rounds_bool_exp!]
  _not: rounds_bool_exp
  _or: [rounds_bool_exp!]
  answer: String_comparison_exp
  guesses: bigint_comparison_exp
  image: String_comparison_exp
  index: bigint_comparison_exp
  points: bigint_comparison_exp
  quiz: quizzes_bool_exp
  quiz_id: bigint_comparison_exp
  speed: float8_comparison_exp
}

"""
unique or primary key constraints on table "rounds"
"""
enum rounds_constraint {
  """unique or primary key constraint"""
  rounds_pkey
}

"""
input type for incrementing numeric columns in table "rounds"
"""
input rounds_inc_input {
  guesses: bigint
  index: bigint
  points: bigint
  quiz_id: bigint
  speed: float8
}

"""
input type for inserting data into table "rounds"
"""
input rounds_insert_input {
  answer: String
  guesses: bigint
  image: String
  index: bigint
  points: bigint
  quiz: quizzes_obj_rel_insert_input
  quiz_id: bigint
  speed: float8
}

"""aggregate max on columns"""
type rounds_max_fields {
  answer: String
  guesses: bigint
  image: String
  index: bigint
  points: bigint
  quiz_id: bigint
  speed: float8
}

"""
order by max() on columns of table "rounds"
"""
input rounds_max_order_by {
  answer: order_by
  guesses: order_by
  image: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""aggregate min on columns"""
type rounds_min_fields {
  answer: String
  guesses: bigint
  image: String
  index: bigint
  points: bigint
  quiz_id: bigint
  speed: float8
}

"""
order by min() on columns of table "rounds"
"""
input rounds_min_order_by {
  answer: order_by
  guesses: order_by
  image: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""
response of any mutation on the table "rounds"
"""
type rounds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [rounds!]!
}

"""
on conflict condition type for table "rounds"
"""
input rounds_on_conflict {
  constraint: rounds_constraint!
  update_columns: [rounds_update_column!]! = []
  where: rounds_bool_exp
}

"""Ordering options when selecting data from "rounds"."""
input rounds_order_by {
  answer: order_by
  guesses: order_by
  image: order_by
  index: order_by
  points: order_by
  quiz: quizzes_order_by
  quiz_id: order_by
  speed: order_by
}

"""primary key columns input for table: rounds"""
input rounds_pk_columns_input {
  index: bigint!
  quiz_id: bigint!
}

"""
select columns of table "rounds"
"""
enum rounds_select_column {
  """column name"""
  answer

  """column name"""
  guesses

  """column name"""
  image

  """column name"""
  index

  """column name"""
  points

  """column name"""
  quiz_id

  """column name"""
  speed
}

"""
input type for updating data in table "rounds"
"""
input rounds_set_input {
  answer: String
  guesses: bigint
  image: String
  index: bigint
  points: bigint
  quiz_id: bigint
  speed: float8
}

"""aggregate stddev on columns"""
type rounds_stddev_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by stddev() on columns of table "rounds"
"""
input rounds_stddev_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""aggregate stddev_pop on columns"""
type rounds_stddev_pop_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by stddev_pop() on columns of table "rounds"
"""
input rounds_stddev_pop_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""aggregate stddev_samp on columns"""
type rounds_stddev_samp_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by stddev_samp() on columns of table "rounds"
"""
input rounds_stddev_samp_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""aggregate sum on columns"""
type rounds_sum_fields {
  guesses: bigint
  index: bigint
  points: bigint
  quiz_id: bigint
  speed: float8
}

"""
order by sum() on columns of table "rounds"
"""
input rounds_sum_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""
update columns of table "rounds"
"""
enum rounds_update_column {
  """column name"""
  answer

  """column name"""
  guesses

  """column name"""
  image

  """column name"""
  index

  """column name"""
  points

  """column name"""
  quiz_id

  """column name"""
  speed
}

"""aggregate var_pop on columns"""
type rounds_var_pop_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by var_pop() on columns of table "rounds"
"""
input rounds_var_pop_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""aggregate var_samp on columns"""
type rounds_var_samp_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by var_samp() on columns of table "rounds"
"""
input rounds_var_samp_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

"""aggregate variance on columns"""
type rounds_variance_fields {
  guesses: Float
  index: Float
  points: Float
  quiz_id: Float
  speed: Float
}

"""
order by variance() on columns of table "rounds"
"""
input rounds_variance_order_by {
  guesses: order_by
  index: order_by
  points: order_by
  quiz_id: order_by
  speed: order_by
}

type subscription_root {
  """
  fetch data from the table: "quizzes"
  """
  quizzes(
    """distinct select on columns"""
    distinct_on: [quizzes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [quizzes_order_by!]

    """filter the rows returned"""
    where: quizzes_bool_exp
  ): [quizzes!]!

  """An aggregate relationship"""
  quizzes_aggregate(
    """distinct select on columns"""
    distinct_on: [quizzes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [quizzes_order_by!]

    """filter the rows returned"""
    where: quizzes_bool_exp
  ): quizzes_aggregate!

  """fetch data from the table: "quizzes" using primary key columns"""
  quizzes_by_pk(id: bigint!): quizzes

  """An array relationship"""
  rounds(
    """distinct select on columns"""
    distinct_on: [rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rounds_order_by!]

    """filter the rows returned"""
    where: rounds_bool_exp
  ): [rounds!]!

  """An aggregate relationship"""
  rounds_aggregate(
    """distinct select on columns"""
    distinct_on: [rounds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rounds_order_by!]

    """filter the rows returned"""
    where: rounds_bool_exp
  ): rounds_aggregate!

  """fetch data from the table: "rounds" using primary key columns"""
  rounds_by_pk(index: bigint!, quiz_id: bigint!): rounds

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  id: String!
  last_seen: timestamptz
  name: String!

  """
  fetch data from the table: "quizzes"
  """
  quizzes(
    """distinct select on columns"""
    distinct_on: [quizzes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [quizzes_order_by!]

    """filter the rows returned"""
    where: quizzes_bool_exp
  ): [quizzes!]!

  """An aggregate relationship"""
  quizzes_aggregate(
    """distinct select on columns"""
    distinct_on: [quizzes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [quizzes_order_by!]

    """filter the rows returned"""
    where: quizzes_bool_exp
  ): quizzes_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
  quizzes: quizzes_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  id: String
  last_seen: timestamptz
  name: String
  quizzes: quizzes_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  id: String
  last_seen: timestamptz
  name: String
}

"""aggregate min on columns"""
type users_min_fields {
  id: String
  last_seen: timestamptz
  name: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  id: order_by
  last_seen: order_by
  name: order_by
  quizzes_aggregate: quizzes_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  id

  """column name"""
  last_seen

  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: String
  last_seen: timestamptz
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  id

  """column name"""
  last_seen

  """column name"""
  name
}

